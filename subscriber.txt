#include <mosquitto.h>
#include <iostream>
#include <cstring>

// Callback function for successful connection
void on_connect(struct mosquitto *mosq, void *obj, int result) {
    if (result == 0) {
        std::cout << "Connected to MQTT broker successfully." << std::endl;
        
        // Subscribe to a topic
        const char* topic = "your/topic/here";
        mosquitto_subscribe(mosq, nullptr, topic, 0);
        std::cout << "Subscribed to topic: " << topic << std::endl;
    } else {
        std::cerr << "Connection failed. Error code: " << result << std::endl;
    }
}

// Callback function for received message
void on_message(struct mosquitto *mosq, void *obj, 
                const struct mosquitto_message *message) {
    if (message->payloadlen) {
        std::cout << "Received message:" << std::endl;
        std::cout << "  Topic: " << message->topic << std::endl;
        std::cout << "  Message: ";
        
        // Convert payload to string (assuming text payload)
        char* payload = new char[message->payloadlen + 1];
        memcpy(payload, message->payload, message->payloadlen);
        payload[message->payloadlen] = '\0';
        
        std::cout << payload << std::endl;
        
        delete[] payload;
    }
}

// Error callback function
void on_error(struct mosquitto *mosq, void *obj, int err) {
    std::cerr << "MQTT Error: " << mosquitto_strerror(err) << std::endl;
}

int main() {
    // Initialize Mosquitto library
    mosquitto_lib_init();

    // Create a new mosquitto client
    struct mosquitto *mosq = mosquitto_new(
        nullptr,  // client ID (nullptr for random ID)
        true,     // clean session flag
        nullptr   // user data
    );

    if (!mosq) {
        std::cerr << "Failed to create Mosquitto client" << std::endl;
        return 1;
    }

    // Set callback functions
    mosquitto_connect_callback_set(mosq, on_connect);
    mosquitto_message_callback_set(mosq, on_message);
    mosquitto_error_callback_set(mosq, on_error);

    // Broker connection parameters
    const char* host = "localhost";  // MQTT broker address
    int port = 1883;                 // Default MQTT port
    int keepalive = 60;              // Keep alive interval in seconds

    // Connect to the broker
    int rc = mosquitto_connect(mosq, host, port, keepalive);
    if (rc != MOSQ_ERR_SUCCESS) {
        std::cerr << "Connection failed: " 
                  << mosquitto_strerror(rc) << std::endl;
        mosquitto_destroy(mosq);
        mosquitto_lib_cleanup();
        return 1;
    }

    // Start the network loop
    rc = mosquitto_loop_start(mosq);
    if (rc != MOSQ_ERR_SUCCESS) {
        std::cerr << "Failed to start loop: " 
                  << mosquitto_strerror(rc) << std::endl;
        mosquitto_destroy(mosq);
        mosquitto_lib_cleanup();
        return 1;
    }

    // Keep the main thread running
    std::cout << "Waiting for messages. Press Ctrl+C to exit." << std::endl;
    while (true) {
        // You can add additional logic here if needed
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }

    // Cleanup (this part is technically unreachable with the infinite loop)
    mosquitto_destroy(mosq);
    mosquitto_lib_cleanup();

    return 0;
}